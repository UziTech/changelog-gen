#!/usr/bin/env node;
var EMPTY_COMPONENT, GIT_LOG_CMD, GIT_TAG_CMD, HEADER_TPL, LINK_COMMIT, LINK_ISSUE, child, currentDate, fs, generate, getPreviousTag, linkToCommit, linkToIssue, parseRawCommit, printSection, q, readGitLog, util, warn, writeChangelog;

child = require("child_process");

fs = require("fs");

util = require("util");

q = require("qq");

GIT_LOG_CMD = "git log --grep=\"%s\" -E --format=%s %s..HEAD";

GIT_TAG_CMD = "git describe --tags --abbrev=0";

HEADER_TPL = "<a name=\"%s\"></a>\n# %s (%s)\n\n";

LINK_ISSUE = "[#%s](https://github.com/angular/angular.js/issues/%s)";

LINK_COMMIT = "[%s](https://github.com/angular/angular.js/commit/%s)";

EMPTY_COMPONENT = "$$";

warn = function() {
  console.log("WARNING:", util.format.apply(null, arguments_));
};

parseRawCommit = function(raw) {
  var lines, match, msg;
  if (!raw) {
    return null;
  }
  lines = raw.split("\n");
  msg = {};
  match = void 0;
  msg.hash = lines.shift();
  msg.subject = lines.shift();
  msg.closes = [];
  msg.breaks = [];
  lines.forEach(function(line) {
    match = line.match(/(?:Closes|Fixes)\s#(\d+)/);
    if (match) {
      msg.closes.push(parseInt(match[1]));
    }
  });
  match = raw.match(/BREAKING CHANGE:([\s\S]*)/);
  if (match) {
    msg.breaking = match[1];
  }
  msg.body = lines.join("\n");
  match = msg.subject.match(/^(.*)\((.*)\)\:\s(.*)$/);
  if (!match || !match[1] || !match[3]) {
    warn("Incorrect message: %s %s", msg.hash, msg.subject);
    return null;
  }
  msg.type = match[1];
  msg.component = match[2];
  msg.subject = match[3];
  return msg;
};

linkToIssue = function(issue) {
  return util.format(LINK_ISSUE, issue, issue);
};

linkToCommit = function(hash) {
  return util.format(LINK_COMMIT, hash.substr(0, 8), hash);
};

currentDate = function() {
  var now, pad;
  now = new Date();
  pad = function(i) {
    return ("0" + i).substr(-2);
  };
  return util.format("%d-%s-%s", now.getFullYear(), pad(now.getMonth() + 1), pad(now.getDate()));
};

printSection = function(stream, title, section, printCommitLinks) {
  var components;
  printCommitLinks = (printCommitLinks === undefined ? true : printCommitLinks);
  components = Object.getOwnPropertyNames(section).sort();
  if (!components.length) {
    return;
  }
  stream.write(util.format("\n## %s\n\n", title));
  components.forEach(function(name) {
    var nested, prefix;
    prefix = "-";
    nested = section[name].length > 1;
    if (name !== EMPTY_COMPONENT) {
      if (nested) {
        stream.write(util.format("- **%s:**\n", name));
        prefix = "  -";
      } else {
        prefix = util.format("- **%s:**", name);
      }
    }
    section[name].forEach(function(commit) {
      if (printCommitLinks) {
        stream.write(util.format("%s %s\n  (%s", prefix, commit.subject, linkToCommit(commit.hash)));
        if (commit.closes.length) {
          stream.write(",\n   " + commit.closes.map(linkToIssue).join(", "));
        }
        stream.write(")\n");
      } else {
        stream.write(util.format("%s %s", prefix, commit.subject));
      }
    });
  });
  stream.write("\n");
};

readGitLog = function(grep, from) {
  var deferred;
  deferred = q.defer();
  child.exec(util.format(GIT_LOG_CMD, grep, "%H%n%s%n%b%n==END==", from), function(code, stdout, stderr) {
    var commits;
    commits = [];
    stdout.split("\n==END==\n").forEach(function(rawCommit) {
      var commit;
      commit = parseRawCommit(rawCommit);
      if (commit) {
        commits.push(commit);
      }
    });
    deferred.resolve(commits);
  });
  return deferred.promise;
};

writeChangelog = function(stream, commits, version) {
  var sections;
  sections = {
    fix: {},
    feat: {},
    perf: {},
    breaks: {}
  };
  sections.breaks[EMPTY_COMPONENT] = [];
  commits.forEach(function(commit) {
    var component, section;
    section = sections[commit.type];
    component = commit.component || EMPTY_COMPONENT;
    if (section) {
      section[component] = section[component] || [];
      section[component].push(commit);
    }
    if (commit.breaking) {
      sections.breaks[component] = sections.breaks[component] || [];
      sections.breaks[component].push({
        subject: util.format("due to %s,\n %s", linkToCommit(commit.hash), commit.breaking),
        hash: commit.hash,
        closes: []
      });
    }
  });
  stream.write(util.format(HEADER_TPL, version, version, currentDate()));
  printSection(stream, "Bug Fixes", sections.fix);
  printSection(stream, "Features", sections.feat);
  printSection(stream, "Performance Improvements", sections.perf);
  printSection(stream, "Breaking Changes", sections.breaks, false);
};

getPreviousTag = function() {
  var deferred;
  deferred = q.defer();
  child.exec(GIT_TAG_CMD, function(code, stdout, stderr) {
    if (code) {
      deferred.reject("Cannot get the previous tag.");
    } else {
      deferred.resolve(stdout.replace("\n", ""));
    }
  });
  return deferred.promise;
};

generate = function(version, file) {
  getPreviousTag().then(function(tag) {
    console.log("Reading git log since", tag);
    readGitLog("^fix|^feat|^perf|BREAKING", tag).then(function(commits) {
      console.log("Parsed", commits.length, "commits");
      console.log("Generating changelog to", file || "stdout", "(", version, ")");
      writeChangelog((file ? fs.createWriteStream(file) : process.stdout), commits, version);
    });
  });
};

exports.parseRawCommit = parseRawCommit;

if (process.argv.join("").indexOf("jasmine-node") === -1) {
  generate(process.argv[2], process.argv[3]);
}
